{"version":3,"sources":["components/irregularVerbs/IrregularVerbsComponent.js","App.js","serviceWorker.js","index.js"],"names":["wrapperStyle","display","flexDirection","alignItems","IrregularVerbsComponent","useState","fillTheGap","setFillTheGap","irregularVerbsList","irregularVerbs","setIrregularVerbs","useEffect","hideRandomCols","verbsWithHiddenCols","map","verb","infinitive","error","simplePastTense","pastParticiple","visibleCol","Math","floor","random","visible","tempVerbs","onChange","evt","correctValue","console","log","inputValue","target","value","updatedIrregularVerbs","style","Button","size","variant","color","onClick","temporaryValue","randomIndex","currentIndex","length","tempIrregularVerbs","shuffleList","border","cellPadding","cellSpacing","bordercolor","key","TextField","id","label","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9932a13e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport irregularVerbsList from \"./IrregularVerbsList.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst wrapperStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nfunction IrregularVerbsComponent() {\r\n  const [fillTheGap, setFillTheGap] = useState(false);\r\n  const [irregularVerbs, setIrregularVerbs] = useState(irregularVerbsList);\r\n\r\n  useEffect(() => {\r\n    hideRandomCols();\r\n  }, []);\r\n\r\n  const hideRandomCols = () => {\r\n    const verbsWithHiddenCols = irregularVerbs.map((verb) => {\r\n      //set all error values to true\r\n      verb.infinitive.error = true;\r\n      verb.simplePastTense.error = true;\r\n      verb.pastParticiple.error = true;\r\n      //get visible Column\r\n      const min = 1;\r\n      const max = 3;\r\n      const visibleCol = Math.floor(Math.random() * (max - min + 1) + min);\r\n      if (visibleCol === 1) {\r\n        verb.infinitive.visible = true;\r\n        verb.simplePastTense.visible = false;\r\n        verb.pastParticiple.visible = false;\r\n      } else if (visibleCol === 2) {\r\n        verb.infinitive.visible = false;\r\n        verb.simplePastTense.visible = true;\r\n        verb.pastParticiple.visible = false;\r\n      } else if (visibleCol === 3) {\r\n        verb.infinitive.visible = false;\r\n        verb.simplePastTense.visible = false;\r\n        verb.pastParticiple.visible = true;\r\n      }\r\n      return verb;\r\n    });\r\n    const tempVerbs = [...verbsWithHiddenCols];\r\n    setIrregularVerbs(tempVerbs);\r\n  };\r\n  const toggleFillTheGap = () => {\r\n    hideRandomCols();\r\n    setFillTheGap(!fillTheGap);\r\n  };\r\n\r\n  const shuffleList = () => {\r\n    var currentIndex = irregularVerbs.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = irregularVerbs[currentIndex];\r\n      irregularVerbs[currentIndex] = irregularVerbs[randomIndex];\r\n      irregularVerbs[randomIndex] = temporaryValue;\r\n    }\r\n    const tempIrregularVerbs = [...irregularVerbs];\r\n    setIrregularVerbs(tempIrregularVerbs);\r\n  };\r\n\r\n  const onChange = (evt, correctValue) => {\r\n    console.log(\"onchange\");\r\n    const inputValue = evt.target.value;\r\n    console.log(inputValue + \"===\" + correctValue);\r\n    if (inputValue === correctValue) {\r\n      const updatedIrregularVerbs = irregularVerbs.map((verb) => {\r\n        if (correctValue === verb.infinitive.value) {\r\n          verb.infinitive.error = false;\r\n        }\r\n\r\n        if (correctValue === verb.simplePastTense.value) {\r\n          verb.simplePastTense.error = false;\r\n        }\r\n\r\n        if (correctValue === verb.pastParticiple.value) {\r\n          verb.pastParticiple.error = false;\r\n        }\r\n        return verb;\r\n      });\r\n      setIrregularVerbs(updatedIrregularVerbs);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={wrapperStyle}>\r\n      <h1>List of Irregular Verbs</h1>\r\n      <div>\r\n        <Button\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => toggleFillTheGap()}\r\n        >\r\n          {fillTheGap && \"stop filling the gap\"}\r\n          {!fillTheGap && \"start filling the gap\"}\r\n        </Button>{\" \"}\r\n        <Button\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => shuffleList()}\r\n        >\r\n          shuffle list\r\n        </Button>\r\n      </div>\r\n      <br />\r\n      <table border=\"1\" cellPadding=\"2\" cellSpacing=\"2\" bordercolor=\"#000000\">\r\n        <tbody>\r\n          <tr>\r\n            <th>\r\n              <strong>Infinitive</strong>\r\n            </th>\r\n            <th>\r\n              <strong>Simple Past Tense</strong>\r\n            </th>\r\n            <th>\r\n              <strong>Past Participle</strong>\r\n            </th>\r\n          </tr>\r\n          {irregularVerbs.map((verb) => {\r\n            if (fillTheGap === true) {\r\n              return (\r\n                <tr key={verb.infinitive.value}>\r\n                  <td>\r\n                    {verb.infinitive.visible && verb.infinitive.value}\r\n                    {!verb.infinitive.visible && (\r\n                      <TextField\r\n                        id=\"standard-basic\"\r\n                        label=\"\"\r\n                        error={verb.infinitive.error}\r\n                        onChange={(evt) => onChange(evt, verb.infinitive.value)}\r\n                      />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {verb.simplePastTense.visible && verb.simplePastTense.value}\r\n                    {!verb.simplePastTense.visible && (\r\n                      <TextField\r\n                        id=\"standard-basic\"\r\n                        label=\"\"\r\n                        error={verb.simplePastTense.error}\r\n                        onChange={(evt) =>\r\n                          onChange(evt, verb.simplePastTense.value)\r\n                        }\r\n                      />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {verb.pastParticiple.visible && verb.pastParticiple.value}\r\n                    {!verb.pastParticiple.visible && (\r\n                      <TextField\r\n                        id=\"standard-basic\"\r\n                        label=\"\"\r\n                        error={verb.pastParticiple.error}\r\n                        onChange={(evt) =>\r\n                          onChange(evt, verb.pastParticiple.value)\r\n                        }\r\n                      />\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            } else {\r\n              return (\r\n                <tr key={verb.infinitive.value}>\r\n                  <td>{verb.infinitive.value}</td>\r\n                  <td>{verb.simplePastTense.value}</td>\r\n                  <td>{verb.pastParticiple.value}</td>\r\n                </tr>\r\n              );\r\n            }\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IrregularVerbsComponent;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport IrregularVerbsComponent from \"./components/irregularVerbs/IrregularVerbsComponent\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <IrregularVerbsComponent />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}